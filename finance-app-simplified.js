// ·ª®ng d·ª•ng Qu·∫£n L√Ω T√†i Ch√≠nh - Version ƒê∆°n Gi·∫£n T·ª± ƒê·ªông T√≠nh
class FinanceManager {
    constructor() {
        this.data = {
            // Th·∫ª t√≠n d·ª•ng
            creditCards: [
                {
                    id: 1,
                    bankName: "Vietcombank",
                    cardNumber: "****1234",
                    creditLimit: 50000000,
                    currentSpending: 5000000,
                    createdDate: "2024-01-15"
                }
            ],

            // Tr·∫£ g√≥p th·∫ª t√≠n d·ª•ng
            creditCardInstallments: [
                {
                    id: 1,
                    creditCardId: 1,
                    productName: "iPhone 15 Pro",
                    totalAmount: 28000000,
                    termMonths: 12,
                    interestRate: 2.0, // %/th√°ng
                    startDate: "2024-02-01",
                    // T·ª± ƒë·ªông t√≠nh:
                    paymentDay: this.calculatePaymentDay("2024-02-01"),
                    remainingAmount: 20000000
                }
            ],

            // Vay t√≠n ch·∫•p  
            personalLoans: [
                {
                    id: 1,
                    bankName: "BIDV",
                    loanAmount: 100000000,
                    termMonths: 36,
                    interestRate: 12.5, // %/nƒÉm
                    startDate: "2024-01-01",
                    purpose: "Kinh doanh",
                    // T·ª± ƒë·ªông t√≠nh:
                    paymentDay: this.calculatePaymentDay("2024-01-01"),
                    remainingBalance: 75000000,
                    paymentType: "decreasing" // M·∫∑c ƒë·ªãnh d∆∞ n·ª£ gi·∫£m d·∫ßn
                }
            ],

            // Vay th·∫ø ch·∫•p
            mortgageLoans: [
                {
                    id: 1,
                    bankName: "Vietcombank",
                    loanAmount: 800000000,
                    termMonths: 240, // 20 nƒÉm
                    interestRate: 8.5, // %/nƒÉm
                    startDate: "2023-06-01",
                    purpose: "Mua nh√†",
                    // T·ª± ƒë·ªông t√≠nh:
                    paymentDay: this.calculatePaymentDay("2023-06-01"),
                    remainingBalance: 720000000,
                    paymentType: "equal", // Th·∫ø ch·∫•p th∆∞·ªùng d√πng tr·∫£ ƒë·ªÅu
                    gracePeriodMonths: 0
                }
            ],

            // Th·∫•u chi (ƒë∆°n gi·∫£n h√≥a)
            overdrafts: [
                {
                    id: 1,
                    bankName: "Techcombank",
                    amount: 5000000, // S·ªë ti·ªÅn ƒëang s·ª≠ d·ª•ng
                    creditLimit: 20000000,
                    interestRate: 15.0, // %/nƒÉm
                    startDate: "2024-01-01",
                    purpose: "V·ªën l∆∞u ƒë·ªông"
                }
            ]
        };

        this.init();
    }

    init() {
        this.bindEvents();
        this.showDashboard();
    }

    bindEvents() {
        document.querySelectorAll('.menu-item').forEach(item => {
            item.addEventListener('click', (e) => {
                e.preventDefault();
                const section = item.getAttribute('data-section');
                this.showSection(section);

                document.querySelectorAll('.menu-item').forEach(mi => mi.classList.remove('active'));
                item.classList.add('active');
            });
        });
    }

    showSection(section) {
        const addBtn = document.getElementById('add-btn');

        switch(section) {
            case 'dashboard':
                this.showDashboard();
                addBtn.style.display = 'none';
                break;
            case 'credit-cards':
                this.showCreditCards();
                addBtn.style.display = 'block';
                addBtn.onclick = () => this.showAddCreditCardForm();
                break;
            case 'installments':
                this.showInstallments();
                addBtn.style.display = 'block';
                addBtn.onclick = () => this.showAddInstallmentForm();
                break;
            case 'personal-loans':
                this.showPersonalLoans();
                addBtn.style.display = 'block';
                addBtn.onclick = () => this.showAddLoanForm('personal');
                break;
            case 'mortgage-loans':
                this.showMortgageLoans();
                addBtn.style.display = 'block';
                addBtn.onclick = () => this.showAddLoanForm('mortgage');
                break;
            case 'overdrafts':
                this.showOverdrafts();
                addBtn.style.display = 'block';
                addBtn.onclick = () => this.showAddLoanForm('overdraft');
                break;
            case 'payment-schedule':
                this.showPaymentScheduleAll();
                addBtn.style.display = 'none';
                break;
            default:
                this.showDashboard();
                addBtn.style.display = 'none';
                break;
        }

        document.getElementById('page-title').textContent = this.getSectionTitle(section);
    }

    getSectionTitle(section) {
        const titles = {
            'dashboard': 'Dashboard T·ªïng Quan',
            'credit-cards': 'Qu·∫£n L√Ω Th·∫ª T√≠n D·ª•ng',
            'installments': 'Tr·∫£ G√≥p Th·∫ª T√≠n D·ª•ng',
            'personal-loans': 'Vay T√≠n Ch·∫•p',
            'mortgage-loans': 'Vay Th·∫ø Ch·∫•p',
            'overdrafts': 'Th·∫•u Chi',
            'payment-schedule': 'L·ªãch Tr·∫£ N·ª£ T·ªïng H·ª£p'
        };
        return titles[section] || 'Dashboard';
    }

    // ===== T·ª∞ ƒê·ªòNG T√çNH TO√ÅN NG√ÄY TR·∫¢ =====
    calculatePaymentDay(startDate) {
        const date = new Date(startDate);
        return date.getDate();
    }

    // ===== FORM ƒê∆†N GI·∫¢N CHO T·∫§T C·∫¢ LO·∫†I VAY =====
    showAddLoanForm(loanType) {
        const config = this.getLoanFormConfig(loanType);

        const content = document.getElementById('main-content');
        content.innerHTML = `
            <div class="form-container">
                <h3>${config.title}</h3>
                <form id="loanForm" onsubmit="financeManager.addLoan(event, '${loanType}')">

                    <!-- Th√¥ng tin c∆° b·∫£n -->
                    <div class="form-section">
                        <h4>üìã Th√¥ng Tin C∆° B·∫£n</h4>

                        <div class="form-row">
                            <div class="form-group">
                                <label>üè¶ Ng√¢n H√†ng/T·ªï Ch·ª©c</label>
                                <select id="bankName" required>
                                    <option value="">Ch·ªçn ng√¢n h√†ng</option>
                                    ${config.banks.map(bank => `<option value="${bank}">${bank}</option>`).join('')}
                                </select>
                            </div>
                            <div class="form-group">
                                <label>üéØ M·ª•c ƒê√≠ch</label>
                                <select id="purpose" required>
                                    <option value="">Ch·ªçn m·ª•c ƒë√≠ch</option>
                                    ${config.purposes.map(purpose => `<option value="${purpose}">${purpose}</option>`).join('')}
                                </select>
                            </div>
                        </div>
                    </div>

                    <!-- Th√¥ng s·ªë t√†i ch√≠nh -->
                    <div class="form-section">
                        <h4>üí∞ Th√¥ng S·ªë T√†i Ch√≠nh</h4>

                        <div class="form-row">
                            <div class="form-group">
                                <label>${config.amountLabel}</label>
                                <input type="number" id="amount" placeholder="${config.amountPlaceholder}" 
                                       min="${config.minAmount}" step="${config.amountStep}" required 
                                       onchange="financeManager.calculatePreview('${loanType}')">
                                <small>${config.amountHint}</small>
                            </div>
                            <div class="form-group">
                                <label>üìÖ Th·ªùi H·∫°n (th√°ng)</label>
                                <select id="termMonths" required onchange="financeManager.calculatePreview('${loanType}')">
                                    <option value="">Ch·ªçn th·ªùi h·∫°n</option>
                                    ${config.terms.map(term => 
                                        `<option value="${term.months}">${term.label}</option>`
                                    ).join('')}
                                </select>
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group">
                                <label>üìà L√£i Su·∫•t (${config.rateUnit})</label>
                                <input type="number" id="interestRate" placeholder="${config.ratePlaceholder}" 
                                       min="0" step="0.1" required 
                                       onchange="financeManager.calculatePreview('${loanType}')">
                                <small>${config.rateHint}</small>
                            </div>
                            <div class="form-group">
                                <label>üìÖ Ng√†y B·∫Øt ƒê·∫ßu</label>
                                <input type="date" id="startDate" required 
                                       onchange="financeManager.calculatePreview('${loanType}')">
                            </div>
                        </div>
                    </div>

                    ${loanType === 'installment' ? this.renderCreditCardSelection() : ''}

                    <!-- Preview t·ª± ƒë·ªông t√≠nh -->
                    <div id="autoPreview" class="auto-preview" style="display: none;">
                        <h4>ü§ñ T·ª± ƒê·ªông T√≠nh To√°n:</h4>
                        <div id="previewContent"></div>
                    </div>

                    <div class="form-actions">
                        <button type="submit" class="btn btn--primary" id="submitBtn" disabled>
                            ‚úÖ ${config.submitText}
                        </button>
                        <button type="button" class="btn btn--secondary" onclick="financeManager.goBackFromForm('${loanType}')">
                            ‚ùå H·ªßy
                        </button>
                    </div>
                </form>
            </div>
        `;

        // Set ng√†y m·∫∑c ƒë·ªãnh
        document.getElementById('startDate').valueAsDate = new Date();
    }

    getLoanFormConfig(loanType) {
        const configs = {
            personal: {
                title: "üíº Th√™m Vay T√≠n Ch·∫•p",
                amountLabel: "üí∞ S·ªë Ti·ªÅn Vay (VNƒê)",
                amountPlaceholder: "100000000",
                minAmount: "1000000",
                amountStep: "1000000",
                amountHint: "S·ªë ti·ªÅn c·∫ßn vay",
                rateUnit: "%/nƒÉm",
                ratePlaceholder: "12.5",
                rateHint: "L√£i su·∫•t vay t√≠n ch·∫•p: 8-25%/nƒÉm",
                submitText: "Th√™m Vay T√≠n Ch·∫•p",
                banks: ["BIDV", "Vietcombank", "Techcombank", "VietinBank", "ACB", "MB Bank", "Sacombank"],
                purposes: ["Kinh doanh", "Ti√™u d√πng", "Mua xe", "S·ª≠a nh√†", "Du h·ªçc", "Y t·∫ø", "C∆∞·ªõi xin", "Kh√°c"],
                terms: [
                    {months: 12, label: "12 th√°ng (1 nƒÉm)"},
                    {months: 18, label: "18 th√°ng"},
                    {months: 24, label: "24 th√°ng (2 nƒÉm)"},
                    {months: 36, label: "36 th√°ng (3 nƒÉm)"},
                    {months: 48, label: "48 th√°ng (4 nƒÉm)"},
                    {months: 60, label: "60 th√°ng (5 nƒÉm)"},
                    {months: 84, label: "84 th√°ng (7 nƒÉm)"}
                ]
            },
            mortgage: {
                title: "üè† Th√™m Vay Th·∫ø Ch·∫•p",
                amountLabel: "üí∞ S·ªë Ti·ªÅn Vay (VNƒê)",
                amountPlaceholder: "800000000",
                minAmount: "50000000",
                amountStep: "10000000",
                amountHint: "S·ªë ti·ªÅn vay mua/x√¢y nh√†",
                rateUnit: "%/nƒÉm",
                ratePlaceholder: "8.5",
                rateHint: "L√£i su·∫•t vay th·∫ø ch·∫•p: 6-12%/nƒÉm",
                submitText: "Th√™m Vay Th·∫ø Ch·∫•p",
                banks: ["Vietcombank", "BIDV", "Agribank", "Techcombank", "VietinBank", "ACB", "MB Bank"],
                purposes: ["Mua nh√†", "X√¢y nh√†", "S·ª≠a nh√†", "Mua ƒë·∫•t", "Refinance", "ƒê·∫ßu t∆∞ BDS"],
                terms: [
                    {months: 120, label: "10 nƒÉm"},
                    {months: 180, label: "15 nƒÉm"},
                    {months: 240, label: "20 nƒÉm"},
                    {months: 300, label: "25 nƒÉm"},
                    {months: 360, label: "30 nƒÉm"}
                ]
            },
            overdraft: {
                title: "üè¶ Th√™m Th·∫•u Chi",
                amountLabel: "üí∏ S·ªë Ti·ªÅn ƒêang S·ª≠ D·ª•ng (VNƒê)",
                amountPlaceholder: "5000000",
                minAmount: "100000",
                amountStep: "100000",
                amountHint: "S·ªë ti·ªÅn hi·ªán ƒëang th·∫•u chi",
                rateUnit: "%/nƒÉm",
                ratePlaceholder: "15.0",
                rateHint: "L√£i su·∫•t th·∫•u chi: 12-20%/nƒÉm",
                submitText: "Th√™m Th·∫•u Chi",
                banks: ["Techcombank", "BIDV", "Vietcombank", "VietinBank", "ACB", "MB Bank", "VPBank"],
                purposes: ["V·ªën l∆∞u ƒë·ªông", "Kinh doanh", "Thanh to√°n", "Kh·∫©n c·∫•p", "ƒê·∫ßu t∆∞ ng·∫Øn h·∫°n"],
                terms: [
                    {months: 1, label: "1 th√°ng (ng·∫Øn h·∫°n)"},
                    {months: 3, label: "3 th√°ng"},
                    {months: 6, label: "6 th√°ng"},
                    {months: 12, label: "12 th√°ng (gia h·∫°n)"}
                ]
            },
            installment: {
                title: "üõçÔ∏è Th√™m Tr·∫£ G√≥p Th·∫ª T√≠n D·ª•ng",
                amountLabel: "üí∞ Gi√° Tr·ªã S·∫£n Ph·∫©m (VNƒê)",
                amountPlaceholder: "28000000",
                minAmount: "1000000",
                amountStep: "100000",
                amountHint: "Gi√° tr·ªã s·∫£n ph·∫©m tr·∫£ g√≥p",
                rateUnit: "%/th√°ng",
                ratePlaceholder: "2.0",
                rateHint: "L√£i su·∫•t tr·∫£ g√≥p: 0-3%/th√°ng",
                submitText: "Th√™m Tr·∫£ G√≥p",
                banks: ["Vietcombank", "Techcombank", "BIDV", "VietinBank", "ACB", "MB Bank"],
                purposes: ["iPhone", "Samsung", "MacBook", "Laptop", "Tivi", "T·ªß l·∫°nh", "M√°y gi·∫∑t", "Xe m√°y", "Kh√°c"],
                terms: [
                    {months: 3, label: "3 th√°ng"},
                    {months: 6, label: "6 th√°ng"},
                    {months: 12, label: "12 th√°ng"},
                    {months: 18, label: "18 th√°ng"},
                    {months: 24, label: "24 th√°ng"},
                    {months: 36, label: "36 th√°ng"}
                ]
            }
        };

        return configs[loanType];
    }

    renderCreditCardSelection() {
        if (this.data.creditCards.length === 0) {
            return `
                <div class="form-section">
                    <div class="warning-message">
                        ‚ö†Ô∏è Vui l√≤ng th√™m √≠t nh·∫•t m·ªôt th·∫ª t√≠n d·ª•ng tr∆∞·ªõc khi t·∫°o tr·∫£ g√≥p!
                    </div>
                </div>
            `;
        }

        return `
            <div class="form-section">
                <h4>üí≥ Ch·ªçn Th·∫ª T√≠n D·ª•ng</h4>
                <div class="form-group">
                    <label>Th·∫ª S·ª≠ D·ª•ng Tr·∫£ G√≥p</label>
                    <select id="creditCardId" required onchange="financeManager.updateCardAvailable()">
                        <option value="">-- Ch·ªçn th·∫ª --</option>
                        ${this.data.creditCards.map(card => `
                            <option value="${card.id}">
                                ${card.bankName} ${card.cardNumber} 
                                (C√≤n: ${this.formatCurrency(this.getCardAvailableLimit(card.id))})
                            </option>
                        `).join('')}
                    </select>
                </div>
                <div id="cardAvailableInfo" class="card-available-info" style="display: none;"></div>
            </div>
        `;
    }

    // ===== T·ª∞ ƒê·ªòNG T√çNH TO√ÅN PREVIEW =====
    calculatePreview(loanType) {
        const amount = document.getElementById('amount').value;
        const termMonths = document.getElementById('termMonths').value;
        const interestRate = document.getElementById('interestRate').value;
        const startDate = document.getElementById('startDate').value;

        const preview = document.getElementById('autoPreview');
        const previewContent = document.getElementById('previewContent');
        const submitBtn = document.getElementById('submitBtn');

        if (amount && termMonths && interestRate && startDate) {
            const calculation = this.calculateLoanDetails(loanType, {
                amount: parseInt(amount),
                termMonths: parseInt(termMonths),
                interestRate: parseFloat(interestRate),
                startDate: startDate
            });

            // Ki·ªÉm tra validation cho tr·∫£ g√≥p th·∫ª t√≠n d·ª•ng
            if (loanType === 'installment') {
                const creditCardId = document.getElementById('creditCardId')?.value;
                if (creditCardId) {
                    const availableLimit = this.getCardAvailableLimit(parseInt(creditCardId));
                    if (parseInt(amount) > availableLimit) {
                        previewContent.innerHTML = `
                            <div class="error-message">
                                ‚ùå S·ªë ti·ªÅn tr·∫£ g√≥p v∆∞·ª£t qu√° h·∫°n m·ª©c c√≤n l·∫°i c·ªßa th·∫ª!
                                <br>H·∫°n m·ª©c c√≤n l·∫°i: ${this.formatCurrency(availableLimit)}
                            </div>
                        `;
                        preview.style.display = 'block';
                        submitBtn.disabled = true;
                        return;
                    }
                }
            }

            previewContent.innerHTML = `
                <div class="preview-grid">
                    <div class="preview-item">
                        <span>üí∞ ${loanType === 'overdraft' ? 'S·ªë ti·ªÅn s·ª≠ d·ª•ng' : 'S·ªë ti·ªÅn vay/tr·∫£ g√≥p'}:</span>
                        <span>${this.formatCurrency(calculation.amount)}</span>
                    </div>
                    <div class="preview-item">
                        <span>üìÖ Th·ªùi h·∫°n:</span>
                        <span>${calculation.termMonths} th√°ng${calculation.termMonths >= 12 ? ` (${Math.round(calculation.termMonths/12)} nƒÉm)` : ''}</span>
                    </div>
                    <div class="preview-item">
                        <span>üìà L√£i su·∫•t:</span>
                        <span>${calculation.interestRate}%/${loanType === 'installment' ? 'th√°ng' : 'nƒÉm'}</span>
                    </div>
                    <div class="preview-item">
                        <span>üóìÔ∏è Ng√†y tr·∫£ h√†ng th√°ng:</span>
                        <span>Ng√†y ${this.calculatePaymentDay(startDate)}</span>
                    </div>
                    ${loanType !== 'overdraft' ? `
                    <div class="preview-item">
                        <span>üí∏ ${calculation.isDecreasing ? 'Th√°ng ƒë·∫ßu' : 'H√†ng th√°ng'}:</span>
                        <span>${this.formatCurrency(calculation.firstPayment)}</span>
                    </div>
                    ${calculation.isDecreasing ? `
                    <div class="preview-item">
                        <span>üí∏ Th√°ng cu·ªëi:</span>
                        <span>${this.formatCurrency(calculation.lastPayment)}</span>
                    </div>` : ''}
                    <div class="preview-item">
                        <span>üí∏ T·ªïng l√£i:</span>
                        <span>${this.formatCurrency(calculation.totalInterest)}</span>
                    </div>
                    <div class="preview-item highlight">
                        <span><strong>üéØ T·ªïng ph·∫£i tr·∫£:</strong></span>
                        <span><strong>${this.formatCurrency(calculation.totalPayment)}</strong></span>
                    </div>` : `
                    <div class="preview-item">
                        <span>üí∏ L√£i h√†ng th√°ng:</span>
                        <span>${this.formatCurrency(calculation.monthlyInterest)}</span>
                    </div>
                    <div class="preview-item">
                        <span>üîÑ C√≥ th·ªÉ t√°i s·ª≠ d·ª•ng:</span>
                        <span>C√≥ (sau khi tr·∫£ n·ª£)</span>
                    </div>`}
                </div>
            `;

            preview.style.display = 'block';
            submitBtn.disabled = false;
        } else {
            preview.style.display = 'none';
            submitBtn.disabled = true;
        }
    }

    // ===== LOGIC T√çNH TO√ÅN CHI TI·∫æT =====
    calculateLoanDetails(loanType, params) {
        const { amount, termMonths, interestRate, startDate } = params;

        if (loanType === 'overdraft') {
            // Th·∫•u chi - t√≠nh l√£i ƒë∆°n gi·∫£n
            const monthlyInterestRate = interestRate / 12 / 100;
            const monthlyInterest = amount * monthlyInterestRate;

            return {
                amount: amount,
                termMonths: termMonths,
                interestRate: interestRate,
                monthlyInterest: monthlyInterest,
                totalPayment: amount + (monthlyInterest * termMonths),
                totalInterest: monthlyInterest * termMonths
            };
        }

        // C√°c lo·∫°i vay kh√°c - d√πng d∆∞ n·ª£ gi·∫£m d·∫ßn
        const isInstallment = loanType === 'installment';
        const monthlyRate = isInstallment ? 
            interestRate / 100 : // Tr·∫£ g√≥p th·∫ª TD: %/th√°ng
            interestRate / 12 / 100; // Vay: %/nƒÉm -> %/th√°ng

        // T√≠nh l·ªãch tr·∫£ n·ª£
        const schedule = [];
        let remainingBalance = amount;
        const principalPerMonth = amount / termMonths;

        for (let month = 1; month <= termMonths; month++) {
            const interestThisMonth = remainingBalance * monthlyRate;
            const totalPaymentThisMonth = principalPerMonth + interestThisMonth;
            remainingBalance -= principalPerMonth;

            schedule.push({
                month: month,
                principalPayment: principalPerMonth,
                interestPayment: interestThisMonth,
                totalPayment: totalPaymentThisMonth,
                remainingBalance: Math.max(0, remainingBalance)
            });
        }

        const totalInterest = schedule.reduce((sum, month) => sum + month.interestPayment, 0);
        const firstPayment = schedule[0].totalPayment;
        const lastPayment = schedule[schedule.length - 1].totalPayment;

        return {
            amount: amount,
            termMonths: termMonths,
            interestRate: interestRate,
            schedule: schedule,
            totalInterest: totalInterest,
            totalPayment: amount + totalInterest,
            firstPayment: firstPayment,
            lastPayment: lastPayment,
            isDecreasing: true // D√πng d∆∞ n·ª£ gi·∫£m d·∫ßn
        };
    }

    // ===== UPDATE CARD AVAILABLE INFO =====
    updateCardAvailable() {
        const cardSelect = document.getElementById('creditCardId');
        const cardInfo = document.getElementById('cardAvailableInfo');

        if (cardSelect && cardSelect.value) {
            const cardId = parseInt(cardSelect.value);
            const card = this.data.creditCards.find(c => c.id === cardId);
            const available = this.getCardAvailableLimit(cardId);

            cardInfo.innerHTML = `
                <div class="card-info-display">
                    <p><strong>üè¶ ${card.bankName} ${card.cardNumber}</strong></p>
                    <p>üí∞ H·∫°n m·ª©c c√≤n l·∫°i: <span class="amount-highlight ${available < 0 ? 'negative' : 'positive'}">${this.formatCurrency(available)}</span></p>
                    ${available < 0 ? '<p class="warning">‚ö†Ô∏è Th·∫ª ƒë√£ v∆∞·ª£t h·∫°n m·ª©c!</p>' : ''}
                </div>
            `;
            cardInfo.style.display = 'block';
        } else {
            cardInfo.style.display = 'none';
        }

        // T√≠nh l·∫°i preview khi thay ƒë·ªïi th·∫ª
        this.calculatePreview('installment');
    }

    // ===== TH√äM VAY/TR·∫¢ G√ìP =====
    addLoan(event, loanType) {
        event.preventDefault();

        const formData = this.collectFormData(loanType);

        switch(loanType) {
            case 'personal':
                formData.paymentType = 'decreasing'; // M·∫∑c ƒë·ªãnh d∆∞ n·ª£ gi·∫£m d·∫ßn
                formData.remainingBalance = formData.loanAmount;
                this.data.personalLoans.push(formData);
                break;
            case 'mortgage':
                formData.paymentType = 'decreasing'; // C√≥ th·ªÉ thay ƒë·ªïi
                formData.remainingBalance = formData.loanAmount;
                formData.gracePeriodMonths = 0; // M·∫∑c ƒë·ªãnh kh√¥ng √¢n h·∫°n
                formData.collateralType = formData.purpose; // D√πng purpose l√†m collateral type
                formData.collateralValue = formData.loanAmount * 1.2; // T√†i s·∫£n th∆∞·ªùng > kho·∫£n vay
                this.data.mortgageLoans.push(formData);
                break;
            case 'overdraft':
                formData.creditLimit = Math.max(formData.amount * 2, formData.amount + 10000000); // H·∫°n m·ª©c ∆∞·ªõc t√≠nh
                formData.currentBalance = formData.amount;
                formData.minimumPaymentPercent = 5; // 5% m·∫∑c ƒë·ªãnh
                formData.reviewDate = this.calculateReviewDate(formData.startDate);
                this.data.overdrafts.push(formData);
                break;
            case 'installment':
                formData.totalAmount = formData.amount;
                formData.remainingAmount = formData.amount; // Ch∆∞a tr·∫£ g√¨
                formData.productName = formData.purpose;
                this.data.creditCardInstallments.push(formData);
                break;
        }

        alert(`‚úÖ ƒê√£ th√™m ${this.getLoanTypeName(loanType)} th√†nh c√¥ng!`);
        this.goBackFromForm(loanType);
    }

    collectFormData(loanType) {
        const baseData = {
            id: Date.now(),
            bankName: document.getElementById('bankName').value,
            purpose: document.getElementById('purpose').value,
            startDate: document.getElementById('startDate').value,
            paymentDay: this.calculatePaymentDay(document.getElementById('startDate').value)
        };

        if (loanType === 'installment') {
            return {
                ...baseData,
                amount: parseInt(document.getElementById('amount').value),
                termMonths: parseInt(document.getElementById('termMonths').value),
                interestRate: parseFloat(document.getElementById('interestRate').value),
                creditCardId: parseInt(document.getElementById('creditCardId').value)
            };
        }

        return {
            ...baseData,
            [loanType === 'overdraft' ? 'amount' : 'loanAmount']: parseInt(document.getElementById('amount').value),
            termMonths: parseInt(document.getElementById('termMonths').value),
            interestRate: parseFloat(document.getElementById('interestRate').value)
        };
    }

    calculateReviewDate(startDate) {
        const date = new Date(startDate);
        date.setFullYear(date.getFullYear() + 1);
        return date.toISOString().split('T')[0];
    }

    getLoanTypeName(loanType) {
        const names = {
            'personal': 'vay t√≠n ch·∫•p',
            'mortgage': 'vay th·∫ø ch·∫•p',
            'overdraft': 'th·∫•u chi',
            'installment': 'tr·∫£ g√≥p th·∫ª t√≠n d·ª•ng'
        };
        return names[loanType];
    }

    goBackFromForm(loanType) {
        switch(loanType) {
            case 'personal':
                this.showPersonalLoans();
                break;
            case 'mortgage':
                this.showMortgageLoans();
                break;
            case 'overdraft':
                this.showOverdrafts();
                break;
            case 'installment':
                this.showInstallments();
                break;
        }
    }

    // ===== LOGIC T√çNH H·∫†N M·ª®C TH·∫∫ T√çN D·ª§NG =====
    getCardUsedAmount(cardId) {
        const card = this.data.creditCards.find(c => c.id === cardId);
        if (!card) return 0;

        const currentSpending = card.currentSpending || 0;
        const installmentAmount = this.data.creditCardInstallments
            .filter(inst => inst.creditCardId === cardId)
            .reduce((sum, inst) => sum + inst.remainingAmount, 0);

        return currentSpending + installmentAmount;
    }

    getCardAvailableLimit(cardId) {
        const card = this.data.creditCards.find(c => c.id === cardId);
        if (!card) return 0;

        const usedAmount = this.getCardUsedAmount(cardId);
        return card.creditLimit - usedAmount;
    }

    // ===== DASHBOARD T·ª∞ ƒê·ªòNG =====
    showDashboard() {
        const stats = this.calculateDashboardStats();

        const content = document.getElementById('main-content');
        content.innerHTML = `
            <div class="dashboard">
                <!-- Stats Cards -->
                <div class="stats-grid">
                    <div class="stat-card debt">
                        <div class="stat-icon">üí∞</div>
                        <div class="stat-content">
                            <h3>T·ªïng N·ª£ Hi·ªán T·∫°i</h3>
                            <div class="stat-value">${this.formatCurrency(stats.totalDebt)}</div>
                        </div>
                    </div>

                    <div class="stat-card available-credit">
                        <div class="stat-icon">üéØ</div>
                        <div class="stat-content">
                            <h3>T√≠n D·ª•ng C√≤n L·∫°i</h3>
                            <div class="stat-value">${this.formatCurrency(stats.totalAvailableCredit)}</div>
                        </div>
                    </div>

                    <div class="stat-card monthly-payment">
                        <div class="stat-icon">üìÖ</div>
                        <div class="stat-content">
                            <h3>Tr·∫£ H√†ng Th√°ng</h3>
                            <div class="stat-value">${this.formatCurrency(stats.monthlyPayment)}</div>
                        </div>
                    </div>

                    <div class="stat-card loans-count">
                        <div class="stat-icon">üìä</div>
                        <div class="stat-content">
                            <h3>T·ªïng Kho·∫£n Vay</h3>
                            <div class="stat-value">${stats.totalLoans}</div>
                        </div>
                    </div>
                </div>

                <!-- Quick Summary -->
                <div class="dashboard-section">
                    <h3>üìã T√≥m T·∫Øt Nhanh</h3>
                    <div class="quick-summary">
                        <div class="summary-item">
                            <span>üí≥ Th·∫ª t√≠n d·ª•ng: </span>
                            <span>${this.data.creditCards.length} th·∫ª</span>
                        </div>
                        <div class="summary-item">
                            <span>üõçÔ∏è Tr·∫£ g√≥p: </span>
                            <span>${this.data.creditCardInstallments.length} kho·∫£n</span>
                        </div>
                        <div class="summary-item">
                            <span>üíº Vay t√≠n ch·∫•p: </span>
                            <span>${this.data.personalLoans.length} kho·∫£n</span>
                        </div>
                        <div class="summary-item">
                            <span>üè† Vay th·∫ø ch·∫•p: </span>
                            <span>${this.data.mortgageLoans.length} kho·∫£n</span>
                        </div>
                        <div class="summary-item">
                            <span>üè¶ Th·∫•u chi: </span>
                            <span>${this.data.overdrafts.length} kho·∫£n</span>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }

    calculateDashboardStats() {
        let totalDebt = 0;
        let totalAvailableCredit = 0;
        let monthlyPayment = 0;

        // T·ªïng n·ª£
        this.data.creditCards.forEach(card => {
            totalDebt += this.getCardUsedAmount(card.id);
            totalAvailableCredit += this.getCardAvailableLimit(card.id);
        });

        this.data.personalLoans.forEach(loan => {
            totalDebt += loan.remainingBalance || loan.loanAmount;
        });

        this.data.mortgageLoans.forEach(loan => {
            totalDebt += loan.remainingBalance || loan.loanAmount;
        });

        this.data.overdrafts.forEach(overdraft => {
            totalDebt += overdraft.currentBalance || overdraft.amount;
            totalAvailableCredit += (overdraft.creditLimit || overdraft.amount * 2) - (overdraft.currentBalance || overdraft.amount);
        });

        // ∆Ø·ªõc t√≠nh thanh to√°n h√†ng th√°ng (simplified)
        [...this.data.personalLoans, ...this.data.mortgageLoans].forEach(loan => {
            if (loan.loanAmount && loan.termMonths && loan.interestRate) {
                const calculation = this.calculateLoanDetails('personal', {
                    amount: loan.loanAmount,
                    termMonths: loan.termMonths,
                    interestRate: loan.interestRate,
                    startDate: loan.startDate
                });
                monthlyPayment += calculation.firstPayment;
            }
        });

        this.data.creditCardInstallments.forEach(inst => {
            if (inst.totalAmount && inst.termMonths && inst.interestRate) {
                const calculation = this.calculateLoanDetails('installment', {
                    amount: inst.totalAmount,
                    termMonths: inst.termMonths,
                    interestRate: inst.interestRate,
                    startDate: inst.startDate
                });
                monthlyPayment += calculation.firstPayment;
            }
        });

        return {
            totalDebt,
            totalAvailableCredit,
            monthlyPayment,
            totalLoans: this.data.personalLoans.length + this.data.mortgageLoans.length + 
                       this.data.overdrafts.length + this.data.creditCardInstallments.length
        };
    }

    formatCurrency(amount) {
        return new Intl.NumberFormat('vi-VN', {
            style: 'currency',
            currency: 'VND',
            minimumFractionDigits: 0
        }).format(amount);
    }

    // ===== PLACEHOLDER METHODS =====
    showCreditCards() { alert('Ch·ª©c nƒÉng th·∫ª t√≠n d·ª•ng'); }
    showInstallments() { alert('Ch·ª©c nƒÉng tr·∫£ g√≥p'); }
    showPersonalLoans() { alert('Ch·ª©c nƒÉng vay t√≠n ch·∫•p'); }
    showMortgageLoans() { alert('Ch·ª©c nƒÉng vay th·∫ø ch·∫•p'); }
    showOverdrafts() { alert('Ch·ª©c nƒÉng th·∫•u chi'); }
    showPaymentScheduleAll() { alert('L·ªãch tr·∫£ n·ª£ t·ªïng h·ª£p'); }
    showAddCreditCardForm() { alert('Form th√™m th·∫ª t√≠n d·ª•ng'); }
    showAddInstallmentForm() { this.showAddLoanForm('installment'); }
}

// Kh·ªüi t·∫°o ·ª©ng d·ª•ng
let financeManager;
document.addEventListener('DOMContentLoaded', function() {
    financeManager = new FinanceManager();
});